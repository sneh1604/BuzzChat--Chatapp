{"ast":null,"code":"var _jsxFileName = \"D:\\\\22IT140\\\\sem 4\\\\react\\\\chatapp\\\\public\\\\src\\\\pages\\\\SetAvtar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { Buffer } from \"buffer\";\n// Import the missing `ToastContainer` component\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { useNavigate } from \"react-router-dom\";\n// Import `setAvatarRoute` from `APIRoutes`\nimport { setAvatarRoute } from \"../utils/APIRoutes\";\n\n// Import loader.gif or replace with another loading spinner\nimport loader from \"../assets/loader.gif\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SetAvatar() {\n  _s();\n  const api = `https://api.multiavatar.com/4645646`;\n  const navigate = useNavigate();\n  const [avatars, setAvatars] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\n  useEffect(() => {\n    if (!localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)) {\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n  const setProfilePicture = async () => {\n    if (selectedAvatar === undefined) {\n      toast.error(\"Please select an avatar\");\n    } else {\n      const user = JSON.parse(localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY));\n      try {\n        const {\n          data\n        } = await axios.post(`${setAvatarRoute}/${user._id}`, {\n          image: avatars[selectedAvatar]\n        });\n        if (data.isSet) {\n          user.isAvatarImageSet = true;\n          user.avatarImage = data.image;\n          localStorage.setItem(process.env.REACT_APP_LOCALHOST_KEY, JSON.stringify(user));\n          navigate(\"/\");\n        } else {\n          toast.error(\"Error setting avatar. Please try again.\");\n        }\n      } catch (error) {\n        console.error(\"Error setting avatar:\", error);\n        toast.error(\"Failed to set avatar. Please try again.\");\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = [];\n        for (let i = 0; i < 4; i++) {\n          const image = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\n          const buffer = new Buffer(image.data);\n          data.push(buffer.toString(\"base64\"));\n        }\n        setAvatars(data);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching avatars:\", error);\n        toast.error(\"Failed to fetch avatars. Please try again later.\");\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [api]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: loader,\n        alt: \"loader\",\n        className: \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-container\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Pick an Avatar as your profile picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatars\",\n          children: avatars.map((avatar, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `avatar ${selectedAvatar === index ? \"selected\" : \"\"}`,\n            onClick: () => setSelectedAvatar(index),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `data:image/svg+xml;base64,${avatar}`,\n              alt: \"avatar\"\n            }, avatar, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setProfilePicture,\n          className: \"submit-btn\",\n          children: \"Set as Profile Picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(SetAvatar, \"BeAPsJ8wCQQyE5ntbVx5JvwfYEY=\", false, function () {\n  return [useNavigate];\n});\n_c = SetAvatar;\nconst Container = styled.div`\n  // Styles...\n`;\n_c2 = Container;\nvar _c, _c2;\n$RefreshReg$(_c, \"SetAvatar\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"names":["React","useEffect","useState","styled","axios","Buffer","ToastContainer","toast","useNavigate","setAvatarRoute","loader","jsxDEV","_jsxDEV","Fragment","_Fragment","SetAvatar","_s","api","navigate","avatars","setAvatars","isLoading","setIsLoading","selectedAvatar","setSelectedAvatar","undefined","localStorage","getItem","process","env","REACT_APP_LOCALHOST_KEY","setProfilePicture","error","user","JSON","parse","data","post","_id","image","isSet","isAvatarImageSet","avatarImage","setItem","stringify","console","fetchData","i","get","Math","round","random","buffer","push","toString","children","Container","src","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","map","avatar","index","onClick","_c","div","_c2","$RefreshReg$"],"sources":["D:/22IT140/sem 4/react/chatapp/public/src/pages/SetAvtar.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport { Buffer } from \"buffer\";\r\n// Import the missing `ToastContainer` component\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// Import `setAvatarRoute` from `APIRoutes`\r\nimport { setAvatarRoute } from \"../utils/APIRoutes\";\r\n\r\n// Import loader.gif or replace with another loading spinner\r\nimport loader from \"../assets/loader.gif\";\r\n\r\nexport default function SetAvatar() {\r\n  const api = `https://api.multiavatar.com/4645646`;\r\n  const navigate = useNavigate();\r\n  const [avatars, setAvatars] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  const setProfilePicture = async () => {\r\n    if (selectedAvatar === undefined) {\r\n      toast.error(\"Please select an avatar\");\r\n    } else {\r\n      const user = JSON.parse(localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY));\r\n\r\n      try {\r\n        const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\r\n          image: avatars[selectedAvatar],\r\n        });\r\n\r\n        if (data.isSet) {\r\n          user.isAvatarImageSet = true;\r\n          user.avatarImage = data.image;\r\n          localStorage.setItem(process.env.REACT_APP_LOCALHOST_KEY, JSON.stringify(user));\r\n          navigate(\"/\");\r\n        } else {\r\n          toast.error(\"Error setting avatar. Please try again.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error setting avatar:\", error);\r\n        toast.error(\"Failed to set avatar. Please try again.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = [];\r\n        for (let i = 0; i < 4; i++) {\r\n          const image = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\r\n          const buffer = new Buffer(image.data);\r\n          data.push(buffer.toString(\"base64\"));\r\n        }\r\n        setAvatars(data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching avatars:\", error);\r\n        toast.error(\"Failed to fetch avatars. Please try again later.\");\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [api]);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {isLoading ? (\r\n          <img src={loader} alt=\"loader\" className=\"loader\" />\r\n        ) : (\r\n          <>\r\n            <div className=\"title-container\">\r\n              <h1>Pick an Avatar as your profile picture</h1>\r\n            </div>\r\n            <div className=\"avatars\">\r\n              {avatars.map((avatar, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`avatar ${selectedAvatar === index ? \"selected\" : \"\"}`}\r\n                  onClick={() => setSelectedAvatar(index)}\r\n                >\r\n                  <img\r\n                    src={`data:image/svg+xml;base64,${avatar}`}\r\n                    alt=\"avatar\"\r\n                    key={avatar}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <button onClick={setProfilePicture} className=\"submit-btn\">\r\n              Set as Profile Picture\r\n            </button>\r\n            <ToastContainer />\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  // Styles...\r\n`;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}